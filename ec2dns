#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long qw/:config pass_through/;
use Pod::Usage;

my $help          = 0;
my $valid_options = 0;
my $debug         = 0;
my $profile       = 'default';
my $region        = '';
my $filters       = '';
my $private       = 0;
my $prefix        = '';
my $suffix_az     = 0;
my $hosts_file    = '/etc/hosts';
$valid_options= GetOptions(
  'help|?'    => \$help,
  'debug|d'   => \$debug,
  'profile=s' => \$profile,
  'region=s'  => \$region,
  'filters=s' => \$filters,
  'private'   => \$private,
  'prefix=s'  => \$prefix,
  'suffix_az' => \$suffix_az,
  'hosts=s'   => \$hosts_file,
);
pod2usage(
  -verbose => 2, 
  -noperldoc => 1
) if $help || !$valid_options;

# Parse instance-name
my $instance_name= $ARGV[0] || '';

# Retrieve a list of instances matching provided criteria
my @instances;
my $tag_name_ref;
my @cmd= ("ec2host", $instance_name);
push @cmd, ("--filters", $filters) if $filters;
push @cmd, ("--profile", $profile) if $profile;
push @cmd, ("--region", $region) if $region;
push @cmd, "--debug" if $debug;
open(my $result, '-|', @cmd) or die "External command failed: $!\n";
LOOP: while(my $line = <$result>) {
  chomp $line;
  my ($tag_name, undef, $public_ip, $private_ip, undef, $availability_zone)
    = split /\t/, $line;

  next LOOP unless $tag_name;
    
  # The default is to use instance's public ip for saving in hosts. If
  # the public_ip doesn't exist or if the user set the private flag then use
  # the private_ip
  my $ip
    = $public_ip ne 'None' && !$private ? $public_ip
    : $private_ip ne 'None' ? $private_ip
    : undef;
  if($ip) {
    $tag_name = sprintf("%s%s", $prefix, $tag_name) if $prefix;
    $tag_name = sprintf("%s.%s", $tag_name, $availability_zone)
      if $suffix_az;

    # Add ip and tag name to instances array only if the tag name doesn't
    # already exist
    if(! exists $tag_name_ref->{$tag_name}) {
      push @instances, "$ip\t$tag_name";
      $tag_name_ref->{$tag_name}= 1;
    }
    else {
      print STDERR "Skipping '$tag_name' [$ip] as tag name already exists\n";
    }
  }
}
close $result;

# Parse list of hosts currently defined in hosts file that weren't added via
# ec2dns
my $ec2dns_marker;
my @hosts;
open my $fh, "<", "$hosts_file" or die "Failed to open '$hosts_file': $!";
while (<$fh> ) {
  chomp;
  if(m/^### ec2dns hosts start: $profile$/) {
    $ec2dns_marker = 1;
  }
  elsif(m/^### ec2dns hosts end: $profile$/) {
    $ec2dns_marker = 0;
  }
  else {
    push @hosts, $_ if !$ec2dns_marker;
  }
}
close $fh;

# Add list of matching ec2 instances to hosts array
push @hosts, "### ec2dns hosts start: $profile";
push @hosts, $_ foreach @instances;
push @hosts, "### ec2dns hosts end: $profile";

# Write out hosts file
#
# Since the hosts file (default: /etc/hosts) might be owned by root the new
# hosts will be written to a temp file and then copied over (conditionally by
# sudo if the current user does not have write access)
my $temp_hosts_file = "/tmp/ec2dns_hosts";
open $fh, ">", $temp_hosts_file
  or die "Failed to open '$temp_hosts_file' for write: $!";
print {$fh} join("\n", @hosts)
  or die "Failed to write '$temp_hosts_file': $!";
close $fh or die "Failed to close '$temp_hosts_file': $!";
my @copy_cmd = ("cp", $temp_hosts_file, $hosts_file);
unshift @copy_cmd, "sudo" if ! -w $hosts_file;
system(@copy_cmd) == 0 or die "Failed saving hosts in '$hosts_file': $!";
unlink $temp_hosts_file;

printf STDERR "Added %s ec2 instances to $hosts_file\n", scalar @instances;

1;

=head1 NAME

ec2dns - Adds your Amazon EC2 instance tag names to /etc/hosts

=head1 SYNOPSIS

ec2dns [OPTIONS] instance-name

  Options:
    -? --help       Display this help and exits.
    -d --debug      Turn on debug logging.
       --profile    Use a specific profile from your aws credential file.
       --region     The region to use, overrides config/env settings.
       --filters    A list of filters used to match properties for instances. For a complete reference to the available filter keys for this operation, see the Amazon EC2 API reference.
       --private    Force ec2dns to update /etc/hosts with each instance's private ip address.
       --prefix     Adds a prefix to the tag name in /etc/hosts.
       --suffix_az  Adds the ec2 instance's availability zone as a suffix to the tag name, such as '.us-east-1a'.
       --hosts      The full path to the hosts file to be updated (default: /etc/hosts).
  
  Examples:
    
    # Adds all ec2 instances associated with the default aws profile to /etc/hosts
    ec2dns 
    
    # Adds the private ip address of all ec2 instances to /etc/hosts
    ec2dns --private

    # Adds all ec2 instances whose tag name starts with nginx to /etc/hosts
    ec2dns nginx*

    # Adds all ec2 instances launched with a specific key name
    ec2dns --filters Name=key-name,Values=private-key-name

    # Adds all ec2 instances such that the hostname will be suffixed with the availability zone the instance is located in (nginx1 => nginx1.us-east-1a).
    ec2dns --suffix_az

    # Adds all ec2 instances that are part of a specific aws profile (non-default) to /etc/hosts
    ec2dns --profile prod

    # Adds all ec2 instances that are part of a specific aws profile and applies a prefix to the hostname (nginx1 => prod.nginx1).
    ec2dns --profile prod --prefix "prod."

    # Adds all ec2 instances that are part of multiple aws profiles and applies an appropriate prefix for each
    ec2dns --profile prod --prefix "prod." && ec2dns --profile test --prefix "test."

    # Adds all ec2 instances to a specific file
    ec2dns --hosts /etc/hosts.d/ec2

=head1 DESCRIPTION

Adds your Amazon EC2 instances to /etc/hosts so that your machine can resolve
ec2 instances by tag name directly. Any existing entries in /etc/hosts that
weren't added with this program are preserved. The ec2 instances contained
within an aws profile that were previously added via this program will be
removed and replaced every time this program is executed. Note, this program
can store instances from multiple aws profiles in /etc/hosts through the use of
the --profile option. If the user running this program does not have access to
write /etc/hosts, the program will internally use sudo to perform the write.
Therefore, this program must be run by a user who has access to write
/etc/hosts or has been granted sudo access. Alternatively, the --hosts option
can be used to instruct this program to write hosts to a specific file other
then /etc/hosts.

Note, it's possible that your aws account has more than one instance with the
same tag name. When this occurs, only the first instance will be saved to
/etc/hosts. One possible workaround is to use the --suffix_az option which will
automatically append an instance's availability zone to the tag name when
constructing it's hostname. For example, if your instance's tag name was
'nginx1' and it resided in the 'us-east-1' region in availability zone 'a', the
hostname saved in /etc/hosts would be 'nginx1.us-east-1a'. Obviously this
workaround can't be used for instances with the same name in the same
availability zone.

Please note, this command wraps the AWS Command Line Interface tool which must
be installed and configured (http://aws.amazon.com/cli/) prior to it's use.
Please follow these instructions to install the AWS CLI:

  # Install AWS CLI
  $ sudo pip install awscli

  # Configure AWS CLI 'default' profile
  $ aws configure

  # Additional profiles can be configured as follows
  $ aws configure --profile <profile-name>

=head1 AUTHOR

Peter Williams

=head1 LICENSE

This library is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.

=cut
